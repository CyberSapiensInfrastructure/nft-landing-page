/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ProvidenceMultiSigLibInterface extends utils.Interface {
  contractName: "ProvidenceMultiSigLib";
  functions: {
    "providenceSTORAGE()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "providenceSTORAGE",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "providenceSTORAGE",
    data: BytesLike
  ): Result;

  events: {
    "AddSignature(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "AddValidator(address,uint8,address)": EventFragment;
    "ConfirmSignature(uint256,address,uint8)": EventFragment;
    "ExecuteSignature(uint256,address,uint8)": EventFragment;
    "RevokeSignature(uint256,address,uint8)": EventFragment;
    "UpdValidator(address,uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdValidator"): EventFragment;
}

export type AddSignatureEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    to: string;
    starttime: BigNumber;
    expirationTime: BigNumber;
    validatorConfirmCount: BigNumber;
    observerConfirmCount: BigNumber;
    value: BigNumber;
  }
>;

export type AddSignatureEventFilter = TypedEventFilter<AddSignatureEvent>;

export type AddValidatorEvent = TypedEvent<
  [string, number, string],
  { newValidator: string; level: number; validator: string }
>;

export type AddValidatorEventFilter = TypedEventFilter<AddValidatorEvent>;

export type ConfirmSignatureEvent = TypedEvent<
  [BigNumber, string, number],
  { txIdx: BigNumber; account: string; level: number }
>;

export type ConfirmSignatureEventFilter =
  TypedEventFilter<ConfirmSignatureEvent>;

export type ExecuteSignatureEvent = TypedEvent<
  [BigNumber, string, number],
  { txIdx: BigNumber; account: string; level: number }
>;

export type ExecuteSignatureEventFilter =
  TypedEventFilter<ExecuteSignatureEvent>;

export type RevokeSignatureEvent = TypedEvent<
  [BigNumber, string, number],
  { txIdx: BigNumber; account: string; level: number }
>;

export type RevokeSignatureEventFilter = TypedEventFilter<RevokeSignatureEvent>;

export type UpdValidatorEvent = TypedEvent<
  [string, number, string],
  { exiValidator: string; level: number; validator: string }
>;

export type UpdValidatorEventFilter = TypedEventFilter<UpdValidatorEvent>;

export interface ProvidenceMultiSigLib extends BaseContract {
  contractName: "ProvidenceMultiSigLib";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProvidenceMultiSigLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    providenceSTORAGE(overrides?: CallOverrides): Promise<[string]>;
  };

  providenceSTORAGE(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    providenceSTORAGE(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddSignature(address,uint256,uint256,uint256,uint256,uint256)"(
      to?: string | null,
      starttime?: null,
      expirationTime?: null,
      validatorConfirmCount?: null,
      observerConfirmCount?: null,
      value?: null
    ): AddSignatureEventFilter;
    AddSignature(
      to?: string | null,
      starttime?: null,
      expirationTime?: null,
      validatorConfirmCount?: null,
      observerConfirmCount?: null,
      value?: null
    ): AddSignatureEventFilter;

    "AddValidator(address,uint8,address)"(
      newValidator?: string | null,
      level?: null,
      validator?: null
    ): AddValidatorEventFilter;
    AddValidator(
      newValidator?: string | null,
      level?: null,
      validator?: null
    ): AddValidatorEventFilter;

    "ConfirmSignature(uint256,address,uint8)"(
      txIdx?: BigNumberish | null,
      account?: string | null,
      level?: null
    ): ConfirmSignatureEventFilter;
    ConfirmSignature(
      txIdx?: BigNumberish | null,
      account?: string | null,
      level?: null
    ): ConfirmSignatureEventFilter;

    "ExecuteSignature(uint256,address,uint8)"(
      txIdx?: BigNumberish | null,
      account?: string | null,
      level?: null
    ): ExecuteSignatureEventFilter;
    ExecuteSignature(
      txIdx?: BigNumberish | null,
      account?: string | null,
      level?: null
    ): ExecuteSignatureEventFilter;

    "RevokeSignature(uint256,address,uint8)"(
      txIdx?: BigNumberish | null,
      account?: string | null,
      level?: null
    ): RevokeSignatureEventFilter;
    RevokeSignature(
      txIdx?: BigNumberish | null,
      account?: string | null,
      level?: null
    ): RevokeSignatureEventFilter;

    "UpdValidator(address,uint8,address)"(
      exiValidator?: string | null,
      level?: null,
      validator?: null
    ): UpdValidatorEventFilter;
    UpdValidator(
      exiValidator?: string | null,
      level?: null,
      validator?: null
    ): UpdValidatorEventFilter;
  };

  estimateGas: {
    providenceSTORAGE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    providenceSTORAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
