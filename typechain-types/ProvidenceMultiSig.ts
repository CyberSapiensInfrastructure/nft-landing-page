/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ProvidenceMultiSigInterface extends utils.Interface {
  contractName: "ProvidenceMultiSig";
  functions: {
    "addSignature(address,uint256,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "addValidator(address,uint8)": FunctionFragment;
    "countSignature()": FunctionFragment;
    "countValidator()": FunctionFragment;
    "executeSignature(uint256)": FunctionFragment;
    "revokeSignature(uint256)": FunctionFragment;
    "setObserverCount(uint256)": FunctionFragment;
    "setValidatorCount(uint256)": FunctionFragment;
    "updValidatorRole(address,uint8)": FunctionFragment;
    "viewOperator()": FunctionFragment;
    "viewSignature(uint256)": FunctionFragment;
    "viewValidator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSignature",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countSignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeSignature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSignature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setObserverCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updValidatorRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewSignature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewValidator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setObserverCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updValidatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewValidator",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ProvidenceMultiSig extends BaseContract {
  contractName: "ProvidenceMultiSig";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProvidenceMultiSigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSignature(
      _to: string,
      _starttime: BigNumberish,
      _expirationTime: BigNumberish,
      _numberOfValidator: BigNumberish,
      _numberOfObserver: BigNumberish,
      _value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addValidator(
      _newValidator: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countSignature(overrides?: CallOverrides): Promise<[BigNumber]>;

    countValidator(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeSignature(
      _txIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeSignature(
      _txIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setObserverCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setValidatorCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updValidatorRole(
      _validator: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewOperator(overrides?: CallOverrides): Promise<[string]>;

    viewSignature(
      _txIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        to: string;
        validator: string;
        startTime: BigNumber;
        expirationTime: BigNumber;
        validatorConfirmCount: BigNumber;
        validatorConfirmedCount: BigNumber;
        observerConfirmCount: BigNumber;
        observerConfirmedCount: BigNumber;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    viewValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[string, number, boolean]>;
  };

  addSignature(
    _to: string,
    _starttime: BigNumberish,
    _expirationTime: BigNumberish,
    _numberOfValidator: BigNumberish,
    _numberOfObserver: BigNumberish,
    _value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addValidator(
    _newValidator: string,
    _level: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countSignature(overrides?: CallOverrides): Promise<BigNumber>;

  countValidator(overrides?: CallOverrides): Promise<BigNumber>;

  executeSignature(
    _txIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeSignature(
    _txIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setObserverCount(
    _confirmCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setValidatorCount(
    _confirmCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updValidatorRole(
    _validator: string,
    _level: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewOperator(overrides?: CallOverrides): Promise<string>;

  viewSignature(
    _txIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean
    ] & {
      to: string;
      validator: string;
      startTime: BigNumber;
      expirationTime: BigNumber;
      validatorConfirmCount: BigNumber;
      validatorConfirmedCount: BigNumber;
      observerConfirmCount: BigNumber;
      observerConfirmedCount: BigNumber;
      value: BigNumber;
      data: string;
      executed: boolean;
    }
  >;

  viewValidator(
    _validator: string,
    overrides?: CallOverrides
  ): Promise<[string, number, boolean]>;

  callStatic: {
    addSignature(
      _to: string,
      _starttime: BigNumberish,
      _expirationTime: BigNumberish,
      _numberOfValidator: BigNumberish,
      _numberOfObserver: BigNumberish,
      _value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addValidator(
      _newValidator: string,
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    countSignature(overrides?: CallOverrides): Promise<BigNumber>;

    countValidator(overrides?: CallOverrides): Promise<BigNumber>;

    executeSignature(
      _txIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeSignature(
      _txIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setObserverCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setValidatorCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updValidatorRole(
      _validator: string,
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    viewOperator(overrides?: CallOverrides): Promise<string>;

    viewSignature(
      _txIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean
      ] & {
        to: string;
        validator: string;
        startTime: BigNumber;
        expirationTime: BigNumber;
        validatorConfirmCount: BigNumber;
        validatorConfirmedCount: BigNumber;
        observerConfirmCount: BigNumber;
        observerConfirmedCount: BigNumber;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    viewValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<[string, number, boolean]>;
  };

  filters: {};

  estimateGas: {
    addSignature(
      _to: string,
      _starttime: BigNumberish,
      _expirationTime: BigNumberish,
      _numberOfValidator: BigNumberish,
      _numberOfObserver: BigNumberish,
      _value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addValidator(
      _newValidator: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countSignature(overrides?: CallOverrides): Promise<BigNumber>;

    countValidator(overrides?: CallOverrides): Promise<BigNumber>;

    executeSignature(
      _txIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeSignature(
      _txIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setObserverCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setValidatorCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updValidatorRole(
      _validator: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewOperator(overrides?: CallOverrides): Promise<BigNumber>;

    viewSignature(
      _txIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSignature(
      _to: string,
      _starttime: BigNumberish,
      _expirationTime: BigNumberish,
      _numberOfValidator: BigNumberish,
      _numberOfObserver: BigNumberish,
      _value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addValidator(
      _newValidator: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countSignature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeSignature(
      _txIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeSignature(
      _txIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setObserverCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setValidatorCount(
      _confirmCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updValidatorRole(
      _validator: string,
      _level: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewSignature(
      _txIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
